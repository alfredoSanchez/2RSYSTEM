
create table cidade(
codigo int not null AUTO_INCREMENT,
nome varchar(150) not null,
unidadefederativa_codigo int not null,
PRIMARY KEY(codigo),
FOREIGN KEY(unidadefederativa_codigo) references unidadefederativa(codigo));

create table unidadefederativa(
codigo int not null AUTO_INCREMENT, 
nome varchar(150) not null,
sigla char(2) not null,
PRIMARY KEY(codigo)
);




//1 altera nome tabela GrupoItens
ALTER TABLE `2rsitem`.`grupoitens` RENAME TO  `2rsitem`.`grupoitem` ;

//2 altera nome tabela SubGrupoItens e nome da Fk
ALTER TABLE `2rsitem`.`subgrupoitens` DROP FOREIGN KEY `fk_subGrupoItens_grupoItens1` ;
ALTER TABLE `2rsitem`.`subgrupoitens` CHANGE COLUMN `grupoItens_codigo` `grupoItem_codigo` INT(11) NOT NULL  , 
  ADD CONSTRAINT `fk_subGrupoItem_grupoItem1`
  FOREIGN KEY (`grupoItem_codigo` )
  REFERENCES `2rsitem`.`grupoitem` (`codigo` )
  ON DELETE NO ACTION
  ON UPDATE NO ACTION, RENAME TO  `2rsitem`.`subgrupoitem` ;

//3 altera index nome do index
ALTER TABLE `2rsitem`.`subgrupoitem` 
DROP INDEX `fk_subGrupoItens_grupoItens1` 
, ADD INDEX `fk_subGrupoItem_grupoItem1` (`grupoItem_codigo` ASC) ;

//4 altera tamanho do campo cpf para 15
ALTER TABLE `2rsitem`.`colaborador` CHANGE COLUMN `cpf` `cpf` VARCHAR(15) NOT NULL  ;

//5 altera tamanho do campo telefone e celulat para 15
ALTER TABLE `2rsitem`.`endereco` CHANGE COLUMN `telefone` `telefone` VARCHAR(15) NULL DEFAULT NULL 
 , CHANGE COLUMN `celular` `celular` VARCHAR(15) NULL DEFAULT NULL  ;

// 6/10/12 altera nome da coluda descricao na tabela produto 
ALTER TABLE `2rsitem`.`produto` CHANGE COLUMN `decricao` `descricao` VARCHAR(45) NOT NULL  ;

// 7 alteracao tabela fornecedor
ALTER TABLE `2RSITEM`.`fornecedor` DROP COLUMN `nomeFantasia`
 , CHANGE COLUMN `cnpj` `cnpj` VARCHAR(20) NOT NULL  ;

// 8 renomeia tabela unidadeMedida
ALTER TABLE `2rsitem`.`unidademedidda` RENAME TO  `2rsitem`.`unidademedida` ;

//9 altera tabela produto (nomes e FK errados)
ALTER TABLE `2rsitem`.`produto` DROP FOREIGN KEY `fk_produto_subGrupoItens1` , DROP FOREIGN KEY `fk_produto_unidadeMedidda1` ;
ALTER TABLE `2rsitem`.`produto` CHANGE COLUMN `decricao` `descricao` VARCHAR(45) NOT NULL  , CHANGE COLUMN `unidadeMedidda_codigo` `unidadeMedida_codigo` INT(11) NOT NULL  , 
  ADD CONSTRAINT `fk_produto_subGrupoItem`
  FOREIGN KEY (`subGrupoItens_codigo` )
  REFERENCES `2rsitem`.`subgrupoitem` (`codigo` )
  ON DELETE NO ACTION
  ON UPDATE NO ACTION, 
  ADD CONSTRAINT `fk_produto_unidadeMedidda1`
  FOREIGN KEY (`unidadeMedida_codigo` )
  REFERENCES `2rsitem`.`unidademedida` (`codigo` )
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

//alteracao tabela parceiro
ALTER TABLE `2RSITEM`.`cliente` RENAME TO  `2RSITEM`.`parceiro` ;
ALTER TABLE `2RSITEM`.`parceiro` CHANGE COLUMN `cpf` `cpf` VARCHAR(20) NOT NULL  ;

//saldo estoque default null
ALTER TABLE `2rsitem`.`produto` CHANGE COLUMN `saldoEstoque` `saldoEstoque` FLOAT NULL DEFAULT NULL  ;

//tabela produto define pre√ßoVenda Compra e estoque como default 0
ALTER TABLE `2rsitem`.`produto` 
CHANGE COLUMN `precoVenda` `precoVenda` FLOAT NULL DEFAULT 0  , 
CHANGE COLUMN `precoCompra` `precoCompra` FLOAT NULL DEFAULT 0  ,
CHANGE COLUMN `saldoEstoque` `saldoEstoque` FLOAT NULL DEFAULT 0  ;


//remove as chaves primarias da tabela produtosdacompra
ALTER TABLE `2rsitem`.`produtosdacompra` 
DROP PRIMARY KEY ;

//cria campo pesquisa na tabela compra
ALTER TABLE `2rsitem`.`compra` ADD COLUMN `pesquisa` VARCHAR(150) NULL  AFTER `colaborador_codigo` ;

//triger para adicionar na campo pesquisa conforme foi inserindo novas compras

-- Trigger DDL Statements
DELIMITER $$

USE `2rsitem`$$

CREATE
DEFINER=`root`@`localhost`
TRIGGER `2rsitem`.`INSERT_BI`
BEFORE INSERT ON `2rsitem`.`compra`
FOR EACH ROW
BEGIN

   declare nomeFornecedor varchar(30);
   declare nomeColaborador varchar(30);
           
select p.nome into nomeFornecedor from compra com
        join fornecedor forn
        on forn.codigo = com.fornecedor_codigo
        join pessoa p
            on p.codigo = forn.pessoa_codigo
        where com.codigo = fornecedor_codigo;

select p.nome into nomeColaborador from compra com
        join colaborador col
            on col.codigo = com.colaborador_codigo
        join pessoa p
            on p.codigo = col.pessoa_codigo
        where com.codigo = colaborador_codigo;
        
    #concatena

    set new.pesquisa = concat(nomeFornecedor,'-',
             nomeColaborador,'-', new.dataCompra);

END$$

//triger de pesquisa na venda

-- Trigger DDL Statements
DELIMITER $$

USE `2rsitem`$$

CREATE
DEFINER=`root`@`localhost`
TRIGGER `2rsitem`.`INSERT_BI`
BEFORE INSERT ON `2rsitem`.`venda`
FOR EACH ROW
BEGIN

   declare nomeParceiro varchar(30);
   declare nomeColaborador varchar(30);
           
select p.nome into nomeParceiro from venda vem
        join parceiro cli
        on cli.codigo = vem.cliente_codigo
        join pessoa p
            on p.codigo = cli.pessoa_codigo
        where vem.codigo = cliente_codigo;

select p.nome into nomeColaborador from venda vem
        join colaborador col
            on col.codigo = vem.colaborador_codigo
        join pessoa p
            on p.codigo = col.pessoa_codigo
        where vem.codigo = colaborador_codigo;

    set new.pesquisa = concat(nomeParceiro,'-',
             nomeColaborador,'-', new.dataVenda);

END$$



// triger para ajustar o saldo de estoque quando houver compra de mercadoria


CREATE
DEFINER=`root`@`localhost`
TRIGGER `2rsitem`.`INSERT_BI`
BEFORE INSERT ON `2rsitem`.`produtosdacompra`
FOR EACH ROW
BEGIN
    
    declare OLDsaldo float;
    
    select saldoEstoque into OLDsaldo from produto where codigo = new.produto_codigo;
    
    UPDATE produto SET saldoEstoque = new.quantidade + (OLDsaldo)
        WHERE codigo = new.produto_codigo;
END$$



//triger para ajustar o saldo de estoque quando houver venda de mercadoria


CREATE
DEFINER=`root`@`localhost`
TRIGGER `2rsitem`.`INSERT_BI`
BEFORE INSERT ON `2rsitem`.`produtosdavenda`
FOR EACH ROW
BEGIN
    
    declare OLDsaldo float;
    
    select saldoEstoque into OLDsaldo from produto where codigo = new.produto_codigo;
    
    UPDATE produto SET saldoEstoque = new.quantidade - (OLDsaldo)
        WHERE codigo = new.produto_codigo;
END$$


//triger para ajustar o saldo de estoque quando excluir algum produto da compra

CREATE
DEFINER=`root`@`localhost`
TRIGGER `2rsitem`.`DELETE_AD`
AFTER DELETE ON `2rsitem`.`produtosdacompra`
FOR EACH ROW
BEGIN
    
    declare OLDsaldo float;
    
    select saldoEstoque into OLDsaldo from produto where codigo = old.produto_codigo;
    
    UPDATE produto SET saldoEstoque = old.quantidade - (OLDsaldo)
        WHERE codigo = old.produto_codigo;
END$$

